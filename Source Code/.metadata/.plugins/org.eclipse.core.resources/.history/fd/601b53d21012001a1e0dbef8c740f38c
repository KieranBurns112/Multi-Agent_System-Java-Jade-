package supplyChain;

import jade.core.AID;
import jade.core.Agent;
import jade.core.behaviours.Behaviour;
import jade.core.behaviours.CyclicBehaviour;
import jade.core.behaviours.OneShotBehaviour;
import jade.core.behaviours.SequentialBehaviour;
import jade.domain.DFService;
import jade.domain.FIPAException;
import jade.domain.FIPAAgentManagement.DFAgentDescription;
import jade.domain.FIPAAgentManagement.ServiceDescription;
import jade.lang.acl.ACLMessage;
import jade.lang.acl.MessageTemplate;

public class Customer extends Agent {
	
	@Override
	protected void setup() {
		DFAgentDescription dfd = new DFAgentDescription();
		dfd.setName(getAID());
		ServiceDescription sd = new ServiceDescription();
		sd.setType("customer");
		sd.setName(getLocalName() + "-customer-agent");
		dfd.addServices(sd);
		try {
			DFService.register(this, dfd);
		}
		catch (FIPAException e) {
			e.printStackTrace();
		}
		

		//Create order with all details to send to manufacturer.
		Order order = generateOrder(); 
		
		// ^ MAY NEED TO MOVE TO CYCLIC TICKER BEHAVIOUR ^
		
		
		
		
		addBehaviour(new AwaitTicker(this));
		
		
		
		
		
		
		
		
		//!! Test to check if order works !!
		///
		///
		
		PartTypes partTypes = new PartTypes();
		
		String outputLine = "Agent "+getAID().getName()+"'s order: ";
		PhoneSpecification orderPhone = order.getPhone();
		
		outputLine += partTypes.listScreens() [orderPhone.getScreen()] + ", ";
		outputLine += partTypes.listBatteries() [orderPhone.getBattery()] + ", ";
		outputLine += partTypes.listRAM() [orderPhone.getRAM()] + ", ";
		outputLine += partTypes.listStorage() [orderPhone.getStorage()];
		
		outputLine += "  |  Quantity: " + order.getQuantity();
		outputLine += "  |  Due in " + order.getDays() + " days.";
		outputLine += "  |  £" + order.getPrice() + " per unit.";
		outputLine += "  |  £" + order.getPenalty() + " penalty per day past due date.";
		
		System.out.println(outputLine);

		//
		//
		// !! End of Test !!
		
		
		//SEND ORDER TO MANUFACTURER.
	}
	
	@Override
	protected void takeDown() {
		try {
			DFService.deregister(this);
		}
		catch (FIPAException e) {
			e.printStackTrace();
		}
	}
	
	private PhoneSpecification generatePhone() {
		PhoneSpecification phone = new PhoneSpecification();
		
		// Generate a random number.
		double randomNumber = Math.random();  

		if (randomNumber < 0.5)
		{
			phone.setScreen(0);
			phone.setBattery(0);
		}
		else
		{
			phone.setScreen(1);
			phone.setBattery(1);
		}
		
		//	Generate a new random number.
		randomNumber = Math.random();
		
		if (randomNumber < 0.5)
		{
			phone.setRAM(0);
		}
		else
		{
			phone.setRAM(1);
		}
		
		//	Generate another new random number.
		randomNumber = Math.random();
		
		if (randomNumber < 0.5)
		{
			phone.setStorage(0);
		}
		else
		{
			phone.setStorage(1);
		}
		
		//Return randomly generated specification.
		return phone;
	}
	
	private Order generateOrder() {
		//Create instance of Order class. 
		Order thisOrder = new Order();
				
		//Specification of phones being ordered
		thisOrder.setPhone(generatePhone());
				
		//Quantity of specified phone being requested.
		thisOrder.setQuantity((int) Math.floor(1 + (50*Math.random()))); 
				
		//Price of each phone specified.
		thisOrder.setPrice((int) Math.floor(100 + (500*Math.random()))); 
				
		//Number of days till order is due.
		thisOrder.setDays((int) Math.floor(1 + (10*Math.random())));
				
		//Penalty for late order delivery.
		thisOrder.setPenalty(thisOrder.getQuantity() * ((int) Math.floor(1 + (50*Math.random())))); 
		
		//Return Order.
		return thisOrder;
	}
	
	public class AwaitTicker extends CyclicBehaviour {
		public AwaitTicker(Agent agent) {
			super (agent);
		}
	}
}
